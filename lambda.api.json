{
  "openapi": "3.1.0",
  "info": {
    "title": "Lambda Cloud API",
    "version": "1.7.0",
    "description": "\nThe Lambda Cloud API provides a set of REST API endpoints you can use to create\nand manage your Lambda Cloud resources.\n\n# Response types and formats\n\nThe format of each response object depends on whether the request succeeded or failed.\n\n### Success responses\n\nWhen a request succeeds, the API returns a response object in the following format. `<PAYLOAD>`\nrepresents the endpoint-specific data object returned as part of the response object.\n\n```json\n{\n    \"data\": <PAYLOAD>\n}\n```\n\n### Error responses\n\nWhen a request fails, the API returns an error response object in the following format:\n\n```json\n{\n    \"error\": {\n        \"code\": string,\n        \"message\": string,\n        \"suggestion\": string?\n    }\n}\n```\n\n- `code`: A machine- and human-readable error code specific to a particular failure mode.\n- `message`: An explanation of the error.\n- `suggestion`: When present, a suggestion for how to address the error.\n\n<div style=\"border: 0.075rem solid #47afe8; border-radius: .2rem; font-size: 13px;\n  box-shadow: 0 0.2rem 0.5rem #0000000d,0 0 0.05rem #0000001a; margin-top: 1em;\">\n  <div style=\"background-color: #0489D12f; padding: .4rem 2rem .4rem .6rem; font-weight: bold;\">Note</div>\n  <div style=\"background-color: transparent; padding: .4rem .6rem; line-height: 1.4;\">When\n  handling errors, avoid relying on the values of <code>message</code> or <code>suggestion</code>, as\n  these values are subject to change. Instead, use the value of <code>code</code>.</div>\n</div>\n\n#### Provider errors\n\nIn some cases, you might receive errors that come from upstream services/providers rather than directly\nfrom Lambda services. You can identify these errors by their error code prefix, `provider/`.\n\nCommon provider errors include:\n\n- Network outages or connectivity issues\n- Service unavailability\n- Quota limitations or resource exhaustion\n\nAn example of a typical service unavailability error:\n\n```json\n{\n  \"error\": {\n    \"code\": \"provider/internal-unavailable\",\n    \"message\": \"Provider unavailable\",\n    \"suggestion\": \"Try again shortly\",\n  }\n}\n```\n\n<div class=\"divider\" part=\"operation-divider\"></div>\n\n# Authentication\n\nThe Lambda Cloud API uses API keys to authenticate incoming requests. You\ncan generate a new API key pair or view your existing API keys by visiting\nthe\n<a href=\"/api-keys\" style=\"color: var(--highlight-primary);\ntext-decoration: none\" target=\"_blank\">API keys page</a> in the Lambda Cloud\ndashboard.\n\nIn general, Lambda recommends passing an HTTP Bearer header that contains\nyour API key:\n\n```http\nAuthorization: Bearer <YOUR-API-KEY>\n```\n\n### Authenticating with `curl`\n\nThe API also supports passing an HTTP Basic header. This option chiefly exists\nto support `curl`'s `-u` flag, which allows you to pass your credentials\nwithout having to write out the full `Authorization: Basic` header string.\nFor example:\n\n```bash\ncurl -X GET \"https://cloud.lambda.ai/api/v1/instances\" \\\n  -H 'accept: application/json' \\\n  -u '<YOUR-API-KEY>:'\n```\n\nIf your use case requires it, you can also pass the HTTP Basic header directly.\nThe value you pass must be a Base64-encoded string containing your API key\nand a trailing colon:\n\n```http\nAuthorization: Basic <BASE64-ENCODED-API-KEY-WITH-COLON>\n```\n\n<div style=\"border: 0.075rem solid #E48603; border-radius: .2rem; font-size: 13px;\n  box-shadow: 0 0.2rem 0.5rem #0000000d,0 0 0.05rem #0000001a; margin-top: 1em;\">\n  <div style=\"background-color: #E486031a; padding: .4rem 2rem .4rem .6rem; font-weight: bold;\">Important</div>\n  <div style=\"background-color: transparent; padding: .4rem .6rem; line-height: 1.4;\">If\n  you make a request without including a supported <code>Authorization</code>\n  header, the request will fail.</div>\n</div>\n\n"
  },
  "paths": {
    "/api/v1/instances": {
      "get": {
        "operationId": "listInstances",
        "summary": "List running instances",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Instance"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves a list of your running instances.",
        "tags": [
          "Instances"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/instances/{id}": {
      "get": {
        "operationId": "getInstance",
        "summary": "Retrieve instance details",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "The unique identifier (ID) of the instance",
              "example": "0920582c7ff041399e34823a0be62549"
            },
            "required": true,
            "description": "The unique identifier (ID) of the instance",
            "example": "0920582c7ff041399e34823a0be62549"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Instance"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorInstanceNotFound"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the details of a specific instance, including whether or not the instance is running.",
        "tags": [
          "Instances"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "operationId": "postInstance",
        "summary": "Update instance details",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "The unique identifier (ID) of the instance",
              "example": "0920582c7ff041399e34823a0be62549"
            },
            "required": true,
            "description": "The unique identifier (ID) of the instance",
            "example": "0920582c7ff041399e34823a0be62549"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Instance"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorInstanceNotFound"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorInvalidParameters"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Updates the details of the specified instance.",
        "tags": [
          "Instances"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceModificationRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/instance-types": {
      "get": {
        "operationId": "listInstanceTypes",
        "summary": "List available instance types",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/InstanceTypes"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves a list of the instance types currently offered on Lambda's public cloud, as well as details about each type. Details include resource specifications, pricing, and regional availability.",
        "tags": [
          "Instances"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/instance-operations/launch": {
      "post": {
        "operationId": "launchInstance",
        "summary": "Launch instances",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/ApiErrorAccountInactive"
                        },
                        {
                          "$ref": "#/components/schemas/ApiErrorInvalidBillingAddress"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/InstanceLaunchResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/ApiErrorFileSystemInWrongRegion"
                        },
                        {
                          "$ref": "#/components/schemas/ApiErrorInsufficientCapacity"
                        },
                        {
                          "$ref": "#/components/schemas/ApiErrorInvalidParameters"
                        },
                        {
                          "$ref": "#/components/schemas/ApiErrorLaunchResourceNotFound"
                        },
                        {
                          "$ref": "#/components/schemas/ApiErrorQuotaExceeded"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorLaunchResourceNotFound"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Launches a Lambda On-Demand Cloud instance.",
        "tags": [
          "Instances"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceLaunchRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/instance-operations/restart": {
      "post": {
        "operationId": "restartInstance",
        "summary": "Restart instances",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/InstanceRestartResponse",
                      "examples": [
                        {
                          "restarted_instances": [
                            {
                              "id": "0920582c7ff041399e34823a0be62549",
                              "name": "My Instance",
                              "ip": "198.51.100.2",
                              "private_ip": "10.0.2.100",
                              "status": "active",
                              "ssh_key_names": [
                                "My SSH key"
                              ],
                              "file_system_names": [
                                "my-filesystem"
                              ],
                              "file_system_mounts": [
                                {
                                  "mount_point": "/lambda/nfs/my-filesystem",
                                  "file_system_id": "a098b0c7ff041399e34823a0be62549"
                                }
                              ],
                              "region": {
                                "name": "us-west-1",
                                "description": "California, USA"
                              },
                              "instance_type": {
                                "name": "gpu_8x_a100",
                                "description": "8x A100 (40 GB SXM4)",
                                "gpu_description": "A100 (40 GB SXM4)",
                                "price_cents_per_hour": 1032,
                                "specs": {
                                  "vcpus": 124,
                                  "memory_gib": 1800,
                                  "storage_gib": 6144,
                                  "gpus": 8
                                }
                              },
                              "hostname": "198.51.100.2",
                              "jupyter_token": "03b7d30d9d3e4d8fa41657bc0d478c1b",
                              "jupyter_url": "https://jupyter-249e1ccff1894822af39ac822637f881.lambdaspaces.com/?token=03b7d30d9d3e4d8fa41657bc0d478c1b",
                              "is_reserved": false,
                              "actions": {
                                "migrate": {
                                  "available": true
                                },
                                "rebuild": {
                                  "available": true
                                },
                                "restart": {
                                  "available": true
                                },
                                "cold_reboot": {
                                  "available": true
                                },
                                "terminate": {
                                  "available": true
                                }
                              },
                              "tags": [
                                {
                                  "key": "key1",
                                  "value": "value1"
                                },
                                {
                                  "key": "key2",
                                  "value": "value2"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorInstanceNotFound"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Restarts one or more instances.",
        "tags": [
          "Instances"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRestartRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/instance-operations/terminate": {
      "post": {
        "operationId": "terminateInstance",
        "summary": "Terminate instances",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/InstanceTerminateResponse",
                      "examples": [
                        {
                          "terminated_instances": [
                            {
                              "id": "0920582c7ff041399e34823a0be62549",
                              "name": "My Instance",
                              "ip": "198.51.100.2",
                              "private_ip": "10.0.2.100",
                              "status": "terminating",
                              "ssh_key_names": [
                                "My SSH key"
                              ],
                              "file_system_names": [
                                "my-filesystem"
                              ],
                              "file_system_mounts": [
                                {
                                  "mount_point": "/lambda/nfs/my-filesystem",
                                  "file_system_id": "a098b0c7ff041399e34823a0be62549"
                                }
                              ],
                              "region": {
                                "name": "us-west-1",
                                "description": "California, USA"
                              },
                              "instance_type": {
                                "name": "gpu_8x_a100",
                                "description": "8x A100 (40 GB SXM4)",
                                "gpu_description": "A100 (40 GB SXM4)",
                                "price_cents_per_hour": 1032,
                                "specs": {
                                  "vcpus": 124,
                                  "memory_gib": 1800,
                                  "storage_gib": 6144,
                                  "gpus": 8
                                }
                              },
                              "hostname": "198.51.100.2",
                              "jupyter_token": "03b7d30d9d3e4d8fa41657bc0d478c1b",
                              "jupyter_url": "https://jupyter-249e1ccff1894822af39ac822637f881.lambdaspaces.com/?token=03b7d30d9d3e4d8fa41657bc0d478c1b",
                              "is_reserved": false,
                              "actions": {
                                "migrate": {
                                  "available": true
                                },
                                "rebuild": {
                                  "available": true
                                },
                                "restart": {
                                  "available": true
                                },
                                "cold_reboot": {
                                  "available": true
                                },
                                "terminate": {
                                  "available": true
                                }
                              },
                              "tags": [
                                {
                                  "key": "key1",
                                  "value": "value1"
                                },
                                {
                                  "key": "key2",
                                  "value": "value2"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorInstanceNotFound"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Terminates one or more instances.",
        "tags": [
          "Instances"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceTerminateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ssh-keys": {
      "get": {
        "operationId": "listSSHKeys",
        "summary": "List your SSH keys",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SSHKey"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves a list of your SSH keys.",
        "tags": [
          "SSH keys"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "operationId": "addSSHKey",
        "summary": "Add an SSH key",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/GeneratedSSHKey"
                        },
                        {
                          "$ref": "#/components/schemas/SSHKey"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorInvalidParameters"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "\nAdd an SSH key to your Lambda Cloud account. You can upload an existing public\nkey, or you can generate a new key pair.\n\n-  To use an existing key pair, set the `public_key` property in the request body\n   to your public key.\n\n-  To generate a new key pair, omit the `public_key` property from the request\n   body.\n\n<div style=\"border: 0.075rem solid #E48603; border-radius: .2rem; font-size: 13px;\n  box-shadow: 0 0.2rem 0.5rem #0000000d,0 0 0.05rem #0000001a\">\n  <div style=\"background-color: #E486031a; padding: .4rem 2rem .4rem .6rem; font-weight: bold;\">Important</div>\n  <div style=\"background-color: transparent; padding: .4rem .6rem; line-height: 1.4;\">Lambda doesn't\n  store your private key after it's been generated. If you generate a new key pair, make sure to save\n  the resulting private key locally.</div>\n</div>\n\nFor example, to generate a new key pair and associate it with a Lambda\nOn-Demand Cloud instance:\n\n1. Generate the key pair. The command provided below automatically extracts and\n    saves the returned private key to a new file called `key.pem`. Replace\n    `<NEW-KEY-NAME>` with the name you want to assign to the SSH key:\n\n    ```\n    curl https://cloud.lambda.ai/api/v1/ssh-keys \\\n    --fail \\\n    -u ${LAMBDA_API_KEY}: \\\n    -X POST \\\n    -d '{\"name\": \"<NEW-KEY-NAME>\"}' \\\n    | jq -r '.data.private_key' > key.pem\n    ```\n\n2. Next, set the private key's permissions to read-only:\n\n    ```\n    chmod 400 key.pem\n    ```\n\n3. Launch a new instance. Replace `<NEW-KEY-NAME>` with the name you assigned\n   to your SSH key.\n\n    ```\n    curl -X POST \"https://cloud.lambda.ai/api/v1/instance-operations/launch\" \\\n    --fail \\\n    -u ${LAMBDA_API_KEY}: \\\n    -X POST \\\n    -d '{\"region_name\":\"us-west-1\",\"instance_type_name\":\"gpu_1x_a10\",\"ssh_key_names\":[\"<NEW-KEY-NAME>\"],\"file_system_names\":[],\"quantity\":1,\"name\":\"My Instance\"}'\n    ```\n\n4. From your local terminal, establish an SSH connection to the instance.\n   Replace `<INSTANCE-IP>` with the public IP of the instance:\n\n    ```\n    ssh -i key.pem <INSTANCE-IP>\n    ```\n",
        "tags": [
          "SSH keys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSSHKeyRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/ssh-keys/{id}": {
      "delete": {
        "operationId": "deleteSSHKey",
        "summary": "Delete an SSH key",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "The unique identifier (ID) of the SSH key to delete",
              "example": "ddf9a910ceb744a0bb95242cbba6cb50"
            },
            "required": true,
            "description": "The unique identifier (ID) of the SSH key to delete",
            "example": "ddf9a910ceb744a0bb95242cbba6cb50"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/EmptyResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorInvalidParameters"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes the specified SSH key.",
        "tags": [
          "SSH keys"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/file-systems": {
      "get": {
        "operationId": "listFilesystems",
        "summary": "List filesystems",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Filesystem"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves a list of your filesystems.",
        "tags": [
          "Filesystems"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/filesystems": {
      "post": {
        "operationId": "createFilesystem",
        "summary": "Create filesystem",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/ApiErrorAccountInactive"
                        },
                        {
                          "$ref": "#/components/schemas/ApiErrorInvalidBillingAddress"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Filesystem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/ApiErrorDuplicate"
                        },
                        {
                          "$ref": "#/components/schemas/ApiErrorQuotaExceeded"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new filesystem.",
        "tags": [
          "Filesystems"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilesystemCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/filesystems/{id}": {
      "delete": {
        "operationId": "filesystemDelete",
        "summary": "Delete filesystem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "The unique identifier (ID) of the filesystem to delete",
              "example": "398578a2336b49079e74043f0bd2cfe8"
            },
            "required": true,
            "description": "The unique identifier (ID) of the filesystem to delete",
            "example": "398578a2336b49079e74043f0bd2cfe8"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/FilesystemDeleteResponse"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorFilesystemNotFound"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorFilesystemInUse"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes the filesystem with the specified ID. The filesystem must not be mounted to any running instances at the time of deletion.",
        "tags": [
          "Filesystems"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/images": {
      "get": {
        "operationId": "listImages",
        "summary": "List available images",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Image"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves a list of available images by region.",
        "tags": [
          "Images"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/firewall-rules": {
      "get": {
        "operationId": "firewallRulesList",
        "summary": "List inbound firewall rules",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FirewallRule"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves a list of your firewall rules.\n\n**Note:** Firewall rules do not apply to the **us-south-1** region.",
        "tags": [
          "Firewalls"
        ],
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "operationId": "firewallRulesSet",
        "summary": "Replace inbound firewall rules",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorUnauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/ApiErrorAccountInactive"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FirewallRule"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Overwrites the inbound firewall rules currently active for your account's instances with the desired rules.\n\n**Note:** Firewall rules do not apply to the **us-south-1** region.",
        "tags": [
          "Firewalls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirewallRulesPutRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiErrorUnauthorized": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/invalid-api-key",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "default": "API key was invalid, expired, or deleted.",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "default": "Check your API key or create a new one, then try again.",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message",
          "suggestion"
        ],
        "title": "ApiErrorUnauthorized"
      },
      "ApiErrorAccountInactive": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/account-inactive",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "default": "Your account is inactive.",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "default": "Make sure you have verified your email address and have a valid payment method. Contact Support if problems continue.",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message",
          "suggestion"
        ],
        "title": "ApiErrorAccountInactive"
      },
      "InstanceActionUnavailableCode": {
        "title": "InstanceActionUnavailableCode",
        "enum": [
          "vm-has-not-launched",
          "vm-is-too-old",
          "vm-is-terminating"
        ],
        "type": "string"
      },
      "InstanceActionAvailabilityDetails": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean",
            "description": "If set, indicates that the relevant operation can be performed on the instance in its current state."
          },
          "reason_code": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceActionUnavailableCode"
              },
              {
                "type": "string"
              }
            ],
            "description": "A code representing the instance state that is blocking the operation. Only provided if the operation is blocked."
          },
          "reason_description": {
            "type": "string",
            "description": "A longer description of why this operation is currently blocked. Only provided if the operation is blocked."
          }
        },
        "required": [
          "available"
        ],
        "title": "InstanceActionAvailabilityDetails"
      },
      "InstanceStatus": {
        "title": "InstanceStatus",
        "description": "The current status of the instance.",
        "enum": [
          "booting",
          "active",
          "unhealthy",
          "terminated",
          "terminating"
        ],
        "type": "string"
      },
      "FilesystemMountEntry": {
        "type": "object",
        "properties": {
          "mount_point": {
            "type": "string",
            "description": "The absolute path indicating where on the instance the filesystem will be mounted.",
            "examples": [
              "/data/custom-mount-point"
            ]
          },
          "file_system_id": {
            "type": "string",
            "description": "The id of the filesystem to mount to the instance.",
            "examples": [
              "398578a2336b49079e74043f0bd2cfe8"
            ]
          }
        },
        "required": [
          "mount_point",
          "file_system_id"
        ],
        "title": "FilesystemMountEntry",
        "description": "The mount point for a filesystem mounted to an instance."
      },
      "PublicRegionCode": {
        "title": "PublicRegionCode",
        "enum": [
          "europe-central-1",
          "asia-south-1",
          "australia-east-1",
          "me-west-1",
          "asia-northeast-1",
          "asia-northeast-2",
          "us-east-1",
          "us-west-2",
          "us-west-1",
          "us-south-1",
          "us-west-3",
          "us-midwest-1",
          "us-east-2",
          "us-south-2",
          "us-south-3",
          "us-east-3",
          "us-midwest-2",
          "test-east-1",
          "test-west-1"
        ],
        "type": "string"
      },
      "Region": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/PublicRegionCode",
            "description": "The region code.",
            "examples": [
              "us-west-1"
            ]
          },
          "description": {
            "type": "string",
            "description": "The location represented by the region code.",
            "examples": [
              "California, USA"
            ]
          }
        },
        "required": [
          "name",
          "description"
        ],
        "title": "Region"
      },
      "InstanceTypeSpecs": {
        "type": "object",
        "properties": {
          "vcpus": {
            "type": "integer",
            "description": "The number of virtual CPUs.",
            "examples": [
              208
            ]
          },
          "memory_gib": {
            "type": "integer",
            "description": "The amount of RAM in gibibytes (GiB).",
            "examples": [
              1800
            ]
          },
          "storage_gib": {
            "type": "integer",
            "description": "The amount of storage in gibibytes (GiB).",
            "examples": [
              24780
            ]
          },
          "gpus": {
            "type": "integer",
            "description": "The number of GPUs.",
            "examples": [
              8
            ]
          }
        },
        "required": [
          "vcpus",
          "memory_gib",
          "storage_gib",
          "gpus"
        ],
        "title": "InstanceTypeSpecs"
      },
      "InstanceType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the instance type.",
            "examples": [
              "gpu_8x_h100_sxm5gdr"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description of the instance type.",
            "examples": [
              "8x H100 (80 GB SXM5)"
            ]
          },
          "gpu_description": {
            "type": "string",
            "description": "The type of GPU used by this instance type.",
            "examples": [
              "H100 (80 GB SXM5)"
            ]
          },
          "price_cents_per_hour": {
            "type": "integer",
            "description": "The price of the instance type in US cents per hour.",
            "examples": [
              3592
            ]
          },
          "specs": {
            "$ref": "#/components/schemas/InstanceTypeSpecs",
            "description": "Detailed technical specifications for the instance type."
          }
        },
        "required": [
          "name",
          "description",
          "gpu_description",
          "price_cents_per_hour",
          "specs"
        ],
        "title": "InstanceType"
      },
      "InstanceActionAvailability": {
        "type": "object",
        "properties": {
          "migrate": {
            "$ref": "#/components/schemas/InstanceActionAvailabilityDetails",
            "description": "Indicates whether the instance is currently able to be migrated.\nIf not, describes why the operation is blocked."
          },
          "rebuild": {
            "$ref": "#/components/schemas/InstanceActionAvailabilityDetails",
            "description": "Indicates whether the instance is currently able to be rebuilt.\nIf not, describes why the operation is blocked."
          },
          "restart": {
            "$ref": "#/components/schemas/InstanceActionAvailabilityDetails",
            "description": "Indicates whether the instance is currently able to be restarted.\nIf not, describes why the operation is blocked."
          },
          "cold_reboot": {
            "$ref": "#/components/schemas/InstanceActionAvailabilityDetails",
            "description": "Indicates whether the instance is currently eligible for a cold reboot.\nIf not, describes why the operation is blocked."
          },
          "terminate": {
            "$ref": "#/components/schemas/InstanceActionAvailabilityDetails",
            "description": "Indicates whether the instance is currently able to be terminated.\nIf not, describes why the operation is blocked."
          }
        },
        "required": [
          "migrate",
          "rebuild",
          "restart",
          "cold_reboot",
          "terminate"
        ],
        "title": "InstanceActionAvailability"
      },
      "TagEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the tag.",
            "examples": [
              "key1"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value of the tag.",
            "examples": [
              "value1"
            ]
          }
        },
        "required": [
          "key",
          "value"
        ],
        "title": "TagEntry"
      },
      "Instance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the instance.",
            "examples": [
              "0920582c7ff041399e34823a0be62549"
            ]
          },
          "name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 64,
            "description": "If set, the user-provided name of the instance.",
            "examples": [
              "My Instance"
            ]
          },
          "ip": {
            "type": "string",
            "description": "The public IPv4 address of the instance.",
            "examples": [
              "198.51.100.2"
            ]
          },
          "private_ip": {
            "type": "string",
            "description": "The private IPv4 address of the instance.",
            "examples": [
              "10.0.2.100"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/InstanceStatus"
          },
          "ssh_key_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the SSH keys that are allowed to access the instance.",
            "examples": [
              [
                "My SSH key"
              ],
              []
            ]
          },
          "file_system_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the filesystems mounted to the instance. If no filesystems are mounted, this array is empty.",
            "examples": [
              [
                "my-filesystem"
              ],
              []
            ]
          },
          "file_system_mounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilesystemMountEntry"
            },
            "description": "The filesystems, along with the mount paths, mounted to \nthe instances. If no filesystems are mounted, this parameter\nwill be missing from the response."
          },
          "region": {
            "$ref": "#/components/schemas/Region",
            "description": "The region in which the instance is deployed."
          },
          "instance_type": {
            "$ref": "#/components/schemas/InstanceType",
            "description": "Detailed information about the instance's instance type."
          },
          "hostname": {
            "type": "string",
            "description": "The hostname assigned to this instance, which resolves to the instance's IP.",
            "examples": [
              "headnode1"
            ]
          },
          "jupyter_token": {
            "type": "string",
            "description": "The secret token used to log into the JupyterLab server hosted on the instance.",
            "examples": [
              "03b7d30d9d3e4d8fa41657bc0d478c1b"
            ]
          },
          "jupyter_url": {
            "type": "string",
            "description": "The URL that opens the JupyterLab environment on the instance.",
            "examples": [
              "https://jupyter-249e1ccff1894822af39ac822637f881.lambdaspaces.com/?token=03b7d30d9d3e4d8fa41657bc0d478c1b"
            ]
          },
          "actions": {
            "$ref": "#/components/schemas/InstanceActionAvailability",
            "description": "A set of status objects representing the current availability of common instance operations."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagEntry"
            },
            "description": "Key/value pairs representing the instance's tags."
          }
        },
        "required": [
          "id",
          "status",
          "ssh_key_names",
          "file_system_names",
          "region",
          "instance_type",
          "actions"
        ],
        "title": "Instance",
        "description": "Detailed information about the instance."
      },
      "ApiErrorInstanceNotFound": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/object-does-not-exist",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "default": "Specified instance does not exist.",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "ApiErrorInstanceNotFound"
      },
      "ApiErrorInvalidParameters": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/invalid-parameters",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "default": "Invalid request data.",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "ApiErrorInvalidParameters"
      },
      "InstanceModificationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 64,
            "description": "The new, user-provided name for the instance.",
            "examples": [
              "My Instance"
            ]
          }
        },
        "title": "InstanceModificationRequest"
      },
      "InstanceTypesItem": {
        "type": "object",
        "properties": {
          "instance_type": {
            "$ref": "#/components/schemas/InstanceType",
            "description": "The description, technical specifications, and metadata for this instance type."
          },
          "regions_with_capacity_available": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            },
            "description": "A list of the regions in which this instance type is available."
          }
        },
        "required": [
          "instance_type",
          "regions_with_capacity_available"
        ],
        "title": "InstanceTypesItem",
        "description": "Detailed information and regional availability for the instance type."
      },
      "InstanceTypes": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/InstanceTypesItem"
        },
        "title": "InstanceTypes",
        "example": {
          "gpu_1x_gh200": {
            "instance_type": {
              "name": "gpu_1x_gh200",
              "description": "1x GH200 (96 GB)",
              "gpu_description": "GH200 (96 GB)",
              "price_cents_per_hour": 149,
              "specs": {
                "vcpus": 64,
                "memory_gib": 432,
                "storage_gib": 4096,
                "gpus": 1
              }
            },
            "regions_with_capacity_available": [
              {
                "name": "us-west-1",
                "description": "California, USA"
              }
            ]
          }
        }
      },
      "ApiErrorInvalidBillingAddress": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/invalid-address",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "default": "Your billing address is invalid.",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "default": "Make sure your billing address is valid. Contact Support if problems continue.",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message",
          "suggestion"
        ],
        "title": "ApiErrorInvalidBillingAddress"
      },
      "InstanceLaunchResponse": {
        "type": "object",
        "properties": {
          "instance_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The unique identifiers (IDs) of the launched instances.",
            "examples": [
              [
                "0920582c7ff041399e34823a0be62549"
              ]
            ]
          }
        },
        "required": [
          "instance_ids"
        ],
        "title": "InstanceLaunchResponse"
      },
      "ApiErrorFileSystemInWrongRegion": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "instance-operations/launch/file-system-in-wrong-region",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "ApiErrorFileSystemInWrongRegion"
      },
      "ApiErrorInsufficientCapacity": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "instance-operations/launch/insufficient-capacity",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "default": "Not enough capacity to fulfill launch request.",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "ApiErrorInsufficientCapacity"
      },
      "ApiErrorLaunchResourceNotFound": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/object-does-not-exist",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "description": "The resource the API was unable to find."
          },
          "suggestion": {
            "type": "string",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message",
          "suggestion"
        ],
        "title": "ApiErrorLaunchResourceNotFound"
      },
      "ApiErrorQuotaExceeded": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/quota-exceeded",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "default": "Quota exceeded.",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "default": "Contact Support to increase your quota.",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message",
          "suggestion"
        ],
        "title": "ApiErrorQuotaExceeded"
      },
      "RequestedFilesystemMountEntry": {
        "type": "object",
        "properties": {
          "mount_point": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^(/home|/lambda/nfs|/data)[//a-zA-Z0-9-]*$",
            "description": "The absolute path indicating where on the instance the filesystem will be mounted.",
            "examples": [
              "/data/custom-mount-point"
            ]
          },
          "file_system_id": {
            "type": "string",
            "description": "The id of the filesystem to mount to the instance.",
            "examples": [
              "398578a2336b49079e74043f0bd2cfe8"
            ]
          }
        },
        "required": [
          "mount_point",
          "file_system_id"
        ],
        "title": "RequestedFilesystemMountEntry",
        "description": "The mount point for a filesystem mounted to an instance."
      },
      "ImageSpecificationID": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "ImageSpecificationID",
        "description": "Specifies the image to use by its unique identifier."
      },
      "ImageSpecificationFamily": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "description": "The family name of the image."
          }
        },
        "required": [
          "family"
        ],
        "title": "ImageSpecificationFamily",
        "description": "Specifies the image to use by its family name."
      },
      "RequestedTagEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 55,
            "pattern": "^[a-z][a-z0-9-:]+$",
            "description": "The key of the tag.",
            "examples": [
              "key1"
            ]
          },
          "value": {
            "type": "string",
            "maxLength": 128,
            "description": "The value of the tag.",
            "examples": [
              "value1"
            ]
          }
        },
        "required": [
          "key",
          "value"
        ],
        "title": "RequestedTagEntry"
      },
      "InstanceLaunchRequest": {
        "type": "object",
        "properties": {
          "region_name": {
            "$ref": "#/components/schemas/PublicRegionCode",
            "description": "The region into which you want to launch the instance."
          },
          "instance_type_name": {
            "type": "string",
            "description": "The type of instance you want to launch. To retrieve a list of available instance types, see\n[List available instance types](#get-/api/v1/instance-types).",
            "examples": [
              "gpu_8x_a100"
            ]
          },
          "ssh_key_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the SSH keys you want to use to provide access to the instance.\nCurrently, exactly one SSH key must be specified.",
            "examples": [
              [
                "my-public-key"
              ]
            ]
          },
          "file_system_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the filesystems you want to mount to the instance. When specified\nalongside `file_system_mounts`, any filesystems referred to in both lists will use the\nmount path specified in `file_system_mounts`, rather than the default.",
            "examples": [
              [
                "my-filesystem"
              ],
              []
            ]
          },
          "file_system_mounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedFilesystemMountEntry"
            },
            "description": "The filesystem mounts to mount to the instance. When specified alongside \n`file_system_names`, any filesystems referred to in both lists will use the\nmount path specified in `file_system_mounts`, rather than the default."
          },
          "hostname": {
            "type": "string",
            "minLength": 1,
            "maxLength": 63,
            "pattern": "^[a-z0-9][0-9a-z-]{0,62}$",
            "description": "The hostname to assign to the instance. If not specified, a default, IP-address-based\nhostname is assigned. This hostname is driven into /etc/hostname on the instance.",
            "examples": [
              "headnode1"
            ]
          },
          "name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 64,
            "description": "The name you want to assign to your instance. Must be 64 characters or fewer.",
            "examples": [
              "My Instance"
            ]
          },
          "image": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageSpecificationID"
              },
              {
                "$ref": "#/components/schemas/ImageSpecificationFamily"
              }
            ],
            "description": "The machine image you want to use. Defaults to the latest Lambda Stack image."
          },
          "user_data": {
            "type": "string",
            "writeOnly": true,
            "format": "password",
            "description": "An instance configuration string specified in a valid\n[cloud-init user-data](https://cloudinit.readthedocs.io/en/latest/explanation/format.html)\nformat. You can use this field to configure your instance on launch. The\nuser data string must be plain text and cannot exceed 1MB in size."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedTagEntry"
            },
            "description": "Key/value pairs representing the instance's tags."
          }
        },
        "required": [
          "region_name",
          "instance_type_name",
          "ssh_key_names"
        ],
        "title": "InstanceLaunchRequest"
      },
      "InstanceRestartResponse": {
        "type": "object",
        "properties": {
          "restarted_instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instance"
            },
            "description": "The list of instances that were successfully restarted."
          }
        },
        "required": [
          "restarted_instances"
        ],
        "title": "InstanceRestartResponse"
      },
      "InstanceRestartRequest": {
        "type": "object",
        "properties": {
          "instance_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The unique identifiers (IDs) of the instances to restart.",
            "examples": [
              [
                "0920582c7ff041399e34823a0be62549"
              ]
            ]
          }
        },
        "required": [
          "instance_ids"
        ],
        "title": "InstanceRestartRequest"
      },
      "InstanceTerminateResponse": {
        "type": "object",
        "properties": {
          "terminated_instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instance"
            },
            "description": "The list of instances that were successfully terminated."
          }
        },
        "required": [
          "terminated_instances"
        ],
        "title": "InstanceTerminateResponse"
      },
      "InstanceTerminateRequest": {
        "type": "object",
        "properties": {
          "instance_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The unique identifiers (IDs) of the instances to terminate.",
            "examples": [
              [
                "0920582c7ff041399e34823a0be62549"
              ]
            ]
          }
        },
        "required": [
          "instance_ids"
        ],
        "title": "InstanceTerminateRequest"
      },
      "SSHKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier (ID) of the SSH key.",
            "examples": [
              "ddf9a910ceb744a0bb95242cbba6cb50"
            ]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "The name of the SSH key.",
            "examples": [
              "my-public-key"
            ]
          },
          "public_key": {
            "type": "string",
            "minLength": 1,
            "maxLength": 4096,
            "description": "The public key for the SSH key.",
            "examples": [
              "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICN+lJwsONkwrdsSnQsu1ydUkIuIg5oOC+Eslvmtt60T noname"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "public_key"
        ],
        "title": "SSHKey",
        "description": "Information about a stored SSH key, which can be used to access instances over\nSSH."
      },
      "GeneratedSSHKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier (ID) of the SSH key.",
            "examples": [
              "ddf9a910ceb744a0bb95242cbba6cb50"
            ]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "The name of the SSH key.",
            "examples": [
              "my-public-key"
            ]
          },
          "public_key": {
            "type": "string",
            "minLength": 1,
            "maxLength": 4096,
            "description": "The public key for the SSH key.",
            "examples": [
              "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICN+lJwsONkwrdsSnQsu1ydUkIuIg5oOC+Eslvmtt60T noname"
            ]
          },
          "private_key": {
            "type": "string",
            "description": "The private key generated in the SSH key pair. Make sure to store a\ncopy of this key locally, as Lambda does not store the key server-side.",
            "examples": [
              "-----BEGIN RSA PRIVATE KEY-----\\nMIIEoAIBAAKCAQEAmTi0yMd35HkIKXgEAVLb14fE094YL5qgGqS5ayq9SHi72mlf\\np0hvMr9dqI1wVELRC6cqNYJio9B031gG3dGI3IMpxLzRptYPOmwXIN+jagV40Pzc\\nz6dExtn1OhFwJKlppoPj/2j0QXHSP7dHmRxmlkaQVZs7qy+twkcckMmHU7g9M3dP\\n89P0sQk6xWYX8lF+0bRv/VpNwBcFQfmy36xHpMgIq8hLlBaOZd2fti5jXrQaGOto\\nZo3gI7QLAY9YyFmfRLutBM+F+9ArvhYdYolroJOv8EvEIpN8cljn21WLH6plL22E\\ncLToH66+t0wcCYDHpqKZ/sLLzcjH6kxIgp/mJQIDAQABAoH/HJqr17uwEhg1vPhT\\nGoG6+Snzp45xVGCCT25odw3ERZmX8R6YZSgqtB8rDd2wFnJ53wrHvgePS6Pw63wg\\nRNi7DsX9nToEocY30kowbrezO9Qom7X4DSJwllinRY1pJy+10AWyjDzCZV5UpBHq\\n/M53W0M4rtPjGpgBSevuRVLym8PRMJAF4/YMKSOGN6grNmmBjsqCRw23Cps6ZiK9\\noE7V2UTcMK6WzPiPCbW1KxLoCx0ihdGH5q8Vj/lsRflKLpKVA9QUNCBXlnFzgEYh\\nYK7RGN0zmmITyQfvjdthvCFyMQJ4V2ccxVxa52zqN04Ywvy/HC1mhS9iy6wSSCtP\\nm2xTAoGBANciuYrof8Z3BWOXLBCsDvBYWzLs+wyIoi0SujVGSl9k9ThrahYTtbxq\\nnEKofeYP5gOzqeNGiKveIW8ZFqtiNNe36zSts6h3nndMKBLB92tGWjSG4yRDC7Tp\\nT0okUAkSDnDNwWONx0vhqdoNiLEIVvCp2HCCTCSxbHHOJcAAYtufAoGBALZTUaZz\\nUxF/WCICbxb9dABqk4hKLUe/3Hwhzb5e1PKTGnWesbnDIkIHqNx86MEcYaQQSGzW\\nZ/zBTUsbOC5qZt0UOuMeXiAb7cmwOEx4hiBYkEt/2xCKqQWNVnSY+4LLpGNZanFE\\nTVKZ5QB2oYNiJ3Lby16YStvRBzGc1TTQo+e7AoGAP4eAlRWNTfUtwTgOCipVCwJ8\\ng/BZPl1Gztqd5EeKhNsSUwPdQwG1BBvTYxfQfdSqDuPKQlQ83cvtwZn+CMQqaJ1m\\nNpso15HjWMVDfC6NOr9+uc4vWzD1TwoqoPFSNSuA2izYc+aVOMI93ydp+yVETzNI\\nuAiyJY/DP2Qp36X9i28CgYAlWUIDl+IvVmfGZ7s7+WV25F4ecBuAdCQFZaNQ2PpE\\nSrAD4iNEC14MKqeDqy6+yEKUKiW77dvVYf+kYAoNMAysQwWhGsprR21ZgHi36YSI\\nQbwlSyaj59Oh6IcKUYBMFc0x8NImK7ivMAlCJAsH7+Zm1/F8CjRjfRk9J4RhUlAR\\nGwKBgC4g7eZ/3fBBlL+eMxhCwK2QDS5E0emVI42676hhXAixPJ3PFePXWUmCFsXd\\nB1gDj7SR7h5nefoxjesCTwcf/rV+MPukjot6C9tEHhAJt7bDUelW9XOULwuEDWfL\\nCfG/iBa8YIxol5pw39I73/M+TF49EIDuq0ihXUHyap8MdpZs\\n-----END RSA PRIVATE KEY-----\\n"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "public_key",
          "private_key"
        ],
        "title": "GeneratedSSHKey",
        "description": "Information about a server-generated SSH key, which can be used to access instances over\nSSH."
      },
      "AddSSHKeyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64,
            "description": "The name of the SSH key.",
            "examples": [
              "my-public-key"
            ]
          },
          "public_key": {
            "type": "string",
            "minLength": 1,
            "maxLength": 4096,
            "description": "The public key for the SSH key.",
            "examples": [
              "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICN+lJwsONkwrdsSnQsu1ydUkIuIg5oOC+Eslvmtt60T noname"
            ]
          }
        },
        "required": [
          "name"
        ],
        "title": "AddSSHKeyRequest"
      },
      "EmptyResponse": {
        "type": "object",
        "properties": {},
        "title": "EmptyResponse"
      },
      "UserStatus": {
        "title": "UserStatus",
        "description": "Status of the user's account.",
        "enum": [
          "active",
          "deactivated"
        ],
        "type": "string"
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the user.",
            "examples": [
              "3da5a70a57a7422ea8a7203f98b2198b"
            ]
          },
          "email": {
            "type": "string",
            "description": "The email address of the user.",
            "examples": [
              "me@example.com"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus",
            "description": "The status of the user's account."
          }
        },
        "required": [
          "id",
          "email",
          "status"
        ],
        "title": "User",
        "description": "Information about a user in your Team."
      },
      "Filesystem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier (ID) of the filesystem.",
            "examples": [
              "398578a2336b49079e74043f0bd2cfe8"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the filesystem.",
            "examples": [
              "my-filesystem"
            ]
          },
          "mount_point": {
            "type": "string",
            "description": "The DEFAULT absolute path indicating where on instances the filesystem will be mounted.\nIf `file_system_mounts` were used at launch time, the actual mount point is in the \ninstance response.",
            "examples": [
              "/lambda/nfs/my-filesystem"
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the filesystem was created. Formatted as an ISO 8601 timestamp."
          },
          "created_by": {
            "$ref": "#/components/schemas/User",
            "description": "The user in your Team that created the filesystem."
          },
          "is_in_use": {
            "type": "boolean",
            "description": "Whether the filesystem is currently mounted to an instance. Filesystems that\nare mounted cannot be deleted."
          },
          "region": {
            "$ref": "#/components/schemas/Region",
            "description": "The region in which the filesystem is deployed."
          },
          "bytes_used": {
            "type": "integer",
            "description": "The approximate amount of storage used by the filesystem in bytes. This estimate is\nupdated every few hours."
          }
        },
        "required": [
          "id",
          "name",
          "mount_point",
          "created",
          "created_by",
          "is_in_use",
          "region"
        ],
        "title": "Filesystem",
        "description": "Information about a shared filesystem."
      },
      "ApiErrorDuplicate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/duplicate",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "ApiErrorDuplicate"
      },
      "FilesystemCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 60,
            "pattern": "^[a-zA-Z]+[0-9a-zA-Z-]*$",
            "description": "The name of the filesystem.",
            "examples": [
              "my-filesystem"
            ]
          },
          "region": {
            "$ref": "#/components/schemas/PublicRegionCode",
            "description": "The region in which you want to create the filesystem.",
            "examples": [
              "us-west-1"
            ]
          }
        },
        "required": [
          "name",
          "region"
        ],
        "title": "FilesystemCreateRequest"
      },
      "FilesystemDeleteResponse": {
        "type": "object",
        "properties": {
          "deleted_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The unique identifiers of the filesystems that were deleted.",
            "examples": [
              [
                "398578a2336b49079e74043f0bd2cfe8"
              ]
            ]
          }
        },
        "required": [
          "deleted_ids"
        ],
        "title": "FilesystemDeleteResponse"
      },
      "ApiErrorFilesystemNotFound": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "global/object-does-not-exist",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "default": "Filesystem was not found.",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "ApiErrorFilesystemNotFound"
      },
      "ApiErrorFilesystemInUse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "default": "filesystems/filesystem-in-use",
            "description": "The unique identifier for the type of error."
          },
          "message": {
            "type": "string",
            "description": "A description of the error."
          },
          "suggestion": {
            "type": "string",
            "description": "One or more suggestions of possible ways to fix the error."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "title": "ApiErrorFilesystemInUse"
      },
      "ImageArchitecture": {
        "title": "ImageArchitecture",
        "enum": [
          "x86_64",
          "arm64"
        ],
        "type": "string"
      },
      "Image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier (ID) for an image.",
            "examples": [
              "43336648-096d-4cba-9aa2-f9bb7727639d"
            ]
          },
          "created_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time that the image was created."
          },
          "updated_time": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time that the image was last updated."
          },
          "name": {
            "type": "string",
            "description": "The human-readable identifier for an image.",
            "examples": [
              "ubuntu-24.04.01"
            ]
          },
          "description": {
            "type": "string",
            "description": "Additional information about the image.",
            "examples": [
              "Ubuntu LTS"
            ]
          },
          "family": {
            "type": "string",
            "description": "The family the image belongs to.",
            "examples": [
              "ubuntu-lts"
            ]
          },
          "version": {
            "type": "string",
            "description": "The image version.",
            "examples": [
              "24.04.01"
            ]
          },
          "architecture": {
            "$ref": "#/components/schemas/ImageArchitecture",
            "description": "The CPU architecture the image supports."
          },
          "region": {
            "$ref": "#/components/schemas/Region",
            "description": "The region in which this image is available."
          }
        },
        "required": [
          "id",
          "created_time",
          "updated_time",
          "name",
          "description",
          "family",
          "version",
          "architecture",
          "region"
        ],
        "title": "Image",
        "description": "An available machine image in Lambda Cloud."
      },
      "SecurityGroupRuleProtocol": {
        "title": "SecurityGroupRuleProtocol",
        "enum": [
          "tcp",
          "udp",
          "icmp",
          "all"
        ],
        "type": "string"
      },
      "FirewallRule": {
        "type": "object",
        "properties": {
          "protocol": {
            "$ref": "#/components/schemas/SecurityGroupRuleProtocol",
            "description": "The protocol to which the rule applies.",
            "examples": [
              "tcp"
            ]
          },
          "port_range": {
            "type": "array",
            "items": {
              "type": "integer",
              "maximum": 65535,
              "minimum": 1
            },
            "minItems": 2,
            "maxItems": 2,
            "description": "An inclusive range of network ports specified as `[min, max]`.\nNot allowed for the `icmp` protocol but required for the others.\n\nTo specify a single port, list it twice (for example, `[22,22]`).",
            "examples": [
              [
                22,
                22
              ]
            ]
          },
          "source_network": {
            "type": "string",
            "format": "ipv4network",
            "description": "The set of source IPv4 addresses from which you want to allow inbound\ntraffic. These addresses must be specified in CIDR notation. You can\nspecify individual public IPv4 CIDR blocks such as `1.2.3.4` or\n`1.2.3.4/32`, or you can specify `0.0.0.0/0` to allow access from any\naddress.\n\nThis value is a string consisting of a public IPv4 address optionally\nfollowed by a slash (/) and an integer mask (the network prefix).\nIf no mask is provided, the API assumes `/32` by default.",
            "examples": [
              "0.0.0.0/0"
            ]
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 128,
            "description": "A human-readable description of the rule.",
            "examples": [
              "Allow SSH from anywhere"
            ]
          }
        },
        "required": [
          "protocol",
          "source_network",
          "description"
        ],
        "title": "FirewallRule"
      },
      "FirewallRulesPutRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirewallRule"
            },
            "description": "The list of inbound firewall rules."
          }
        },
        "required": [
          "data"
        ],
        "title": "FirewallRulesPutRequest"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "description": "Basic HTTP authentication. Allowed headers:\n  * `Authorization: Basic <base64 encoding of api_key>:`\n  * `Authorization: Basic <api_key>`",
        "scheme": "basic"
      },
      "bearerAuth": {
        "type": "http",
        "description": "Bearer HTTP authentication. Allowed headers:\n  * `Authorization: Bearer <api_key>`",
        "scheme": "bearer"
      }
    }
  },
  "servers": [
    {
      "url": "https://cloud.lambda.ai/",
      "description": "Production server"
    },
    {
      "url": "https://cloud.lambdalabs.com/",
      "description": "Secondary production server (deprecated)"
    }
  ]
}